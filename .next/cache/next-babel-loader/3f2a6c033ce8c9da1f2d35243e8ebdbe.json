{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/pages/archive.js\";\nimport { useState } from 'react';\nimport { getThemes, getEventList } from '../lib/api';\nimport ArchiveList from '../components/Archive/ArchiveList';\nimport ArchiveToolBar from '../components/Archive/ArchiveToolBar';\n\nconst Archive = ({\n  themes,\n  events\n}) => {\n  const futureThemes = themes.filter(theme => theme.content.Timing[0] === \"archived\");\n  const newThemes = futureThemes.map(theme => ({\n    title: [theme.content.Title],\n    events: [...events.map(event => ({\n      city: event.full_slug.split('archived-events/').pop().split('/')[0],\n      date: event.content.date.replace(' 00:00', '').replace(/-/g, '.'),\n      link: `${event.full_slug.split('archived-events/').pop().split('/')[0]}-${theme.content.title}`\n    }))]\n  })); // Check all the event one by one\n  // If their name is not there yet, add them to array\n  // (Compare with existing array before)\n  // Create a key for each array, with each event (filter allevents)\n\n  let cityList = [];\n  events.forEach(element => {\n    let exists = false;\n    const thisCity = element.full_slug.split('archived-events/');\n    cityList.forEach(city => {\n      if (city === thisCity) exists = true;\n    });\n    if (!exists) cityList.push(thisCity);\n  });\n  console.log(cityList);\n  const archiveList = {\n    theme: [...newThemes],\n    place: [// city: 'Berlin',\n      // events: [\n      //   {\n      //     theme: 'Happiness',\n      //     date: '10.12.2020',\n      //     link: '/archive/berlin/happiness'\n      //   },\n      // ]\n    ]\n  };\n  const {\n    0: archiveMode,\n    1: setArchiveMode\n  } = useState('place');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"archive\",\n    children: [/*#__PURE__*/_jsxDEV(ArchiveToolBar, {\n      archiveMode: archiveMode,\n      setArchiveMode: setArchiveMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ArchiveList, {\n      archiveMode: archiveMode,\n      archiveList: archiveList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getServerSideProps({\n  preview = null\n}) {\n  const themes = (await getThemes(preview)) || [];\n  const events = (await getEventList(preview)) || [];\n  return {\n    props: {\n      themes,\n      events\n    }\n  };\n}\nexport default Archive;","map":{"version":3,"sources":["/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/pages/archive.js"],"names":["useState","getThemes","getEventList","ArchiveList","ArchiveToolBar","Archive","themes","events","futureThemes","filter","theme","content","Timing","newThemes","map","title","Title","event","city","full_slug","split","pop","date","replace","link","cityList","forEach","element","exists","thisCity","push","console","log","archiveList","place","archiveMode","setArchiveMode","getServerSideProps","preview","props"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { getThemes, getEventList } from '../lib/api'\n\nimport ArchiveList from '../components/Archive/ArchiveList'\nimport ArchiveToolBar from '../components/Archive/ArchiveToolBar'\n\nconst Archive = ({ themes, events }) => {\n\n  const futureThemes = themes.filter((theme) => theme.content.Timing[0] === \"archived\")\n\n  const newThemes = futureThemes.map((theme) => ({\n    title: [theme.content.Title],\n    events: [...events.map((event) => ({\n      city: event.full_slug.split('archived-events/').pop().split('/')[0],\n      date: event.content.date.replace(' 00:00','').replace(/-/g,'.'),\n      link: `${event.full_slug.split('archived-events/').pop().split('/')[0]}-${theme.content.title}`\n    }))],\n  }))\n\n  // Check all the event one by one\n  // If their name is not there yet, add them to array\n  // (Compare with existing array before)\n  // Create a key for each array, with each event (filter allevents)\n\n  let cityList = [];\n  events.forEach(element => {\n    let exists = false;\n    const thisCity = element.full_slug.split('archived-events/')\n    cityList.forEach((city) => {\n      if (city === thisCity) exists = true;\n    })\n    if(!exists) cityList.push(thisCity);\n  });\n\n  console.log(cityList)\n\n  const archiveList = {\n    theme: [\n      ...newThemes\n    ],\n    place: [\n      // city: 'Berlin',\n      // events: [\n      //   {\n      //     theme: 'Happiness',\n      //     date: '10.12.2020',\n      //     link: '/archive/berlin/happiness'\n      //   },\n      // ]\n    ]\n  }\n\n  const [archiveMode, setArchiveMode] = useState('place');\n  \n  return (\n    <div id=\"archive\">\n      <ArchiveToolBar archiveMode={archiveMode} setArchiveMode={setArchiveMode}/>\n      <ArchiveList archiveMode={archiveMode} archiveList={archiveList}/>\n    </div>\n  )\n}\n\nexport async function getServerSideProps({ preview = null }) {\n  const themes = (await getThemes(preview)) || []\n  const events = (await getEventList(preview)) || []\n  return {\n      props: { themes, events },\n  }\n}\n\nexport default Archive\n"]},"metadata":{},"sourceType":"module"}