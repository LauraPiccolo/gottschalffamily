{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/laura/Documents/WORK/2021/Storyfeld/Storyfeld Phase 2/pages/archive/[event].js\";\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { getEvents } from '../../lib/api'; // FETCH\n// import staticContent from '../../data'\n\nimport EventToolBar from '../../components/Event/EventToolBar';\nimport StoryRead from '../../components/Event/StoryRead';\nimport StoryWatch from '../../components/Event/StoryWatch';\nimport StoryListen from '../../components/Event/StoryListen';\nimport EventFeedback from '../../components/Event/EventFeedback';\nexport default function event({\n  fetchedContent,\n  lang\n}) {\n  const router = useRouter();\n  const {\n    0: location,\n    1: setLocation\n  } = useState(router.query.event);\n  const {\n    0: media,\n    1: setMedia\n  } = useState('read');\n  const place = location.split('-')[0];\n  const theme = location.split('-')[1];\n  const stories = [1, 2, 3];\n  const modes = ['read', 'watch', 'listen', 'feedback', 'surprise'];\n  useEffect(() => {\n    if (media === \"surprise\") {\n      const randomNumber = Math.round(Math.random() * 3);\n      setMedia(modes[randomNumber]);\n    }\n  }, [media]);\n  const eventInfo = fetchedContent;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event__info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"event__info__theme\",\n          children: theme.charAt(0).toUpperCase() + theme.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"event__info__dateplace\",\n          children: [place.charAt(0).toUpperCase() + place.slice(1), \" \\u2014 \", eventInfo.date.replace(' 00:00', '').replace(/-/g, '.').split('.').reverse().join('.'), \"}\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EventToolBar, {\n        media: media,\n        setMedia: setMedia,\n        lang: lang\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), media !== 'feedback' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event__stories\",\n        children: stories.map(index => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event__stories__single\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"event__stories__single__title\",\n            children: eventInfo[`Title${index}`]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event__stories__single__content\",\n            children: [media === 'read' && /*#__PURE__*/_jsxDEV(StoryRead, {\n              text: eventInfo[`Text${index}`],\n              photo: eventInfo[`Photo${index}`].filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 43\n            }, this), media === 'watch' && /*#__PURE__*/_jsxDEV(StoryWatch, {\n              video: eventInfo[`Video${index}`].filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 44\n            }, this), media === 'listen' && /*#__PURE__*/_jsxDEV(StoryListen, {\n              audio: eventInfo[`Audio${index}`].filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), media === 'feedback' && /*#__PURE__*/_jsxDEV(EventFeedback, {\n        medias: eventInfo.Feedback_medias\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventToolBar, {\n      media: media,\n      setMedia: setMedia,\n      lang: \"en\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\nexport async function getServerSideProps({\n  preview = null,\n  params\n}) {\n  const location = params.event;\n  const place = location.split('-')[0];\n  const theme = location.split('-')[1];\n  const fetchedContent = (await getEvents(`${place}/${theme}`)) || [];\n  return {\n    props: {\n      fetchedContent\n    }\n  };\n}","map":{"version":3,"sources":["/Users/laura/Documents/WORK/2021/Storyfeld/Storyfeld Phase 2/pages/archive/[event].js"],"names":["useRouter","useEffect","useState","getEvents","EventToolBar","StoryRead","StoryWatch","StoryListen","EventFeedback","event","fetchedContent","lang","router","location","setLocation","query","media","setMedia","place","split","theme","stories","modes","randomNumber","Math","round","random","eventInfo","charAt","toUpperCase","slice","date","replace","reverse","join","map","index","filename","Feedback_medias","getServerSideProps","preview","params","props"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,eAA1B,C,CAEA;AACA;;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAf,EAAyC;AAEtD,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAM;AAAA,OAACa,QAAD;AAAA,OAAWC;AAAX,MAA0BZ,QAAQ,CAACU,MAAM,CAACG,KAAP,CAAaN,KAAd,CAAxC;AACA,QAAM;AAAA,OAACO,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,CAAC,MAAD,CAAlC;AACA,QAAMgB,KAAK,GAAGL,QAAQ,CAACM,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAd;AACA,QAAMC,KAAK,GAAGP,QAAQ,CAACM,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAd;AACA,QAAME,OAAO,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAhB;AAEA,QAAMC,KAAK,GAAG,CAAC,MAAD,EAAQ,OAAR,EAAgB,QAAhB,EAAyB,UAAzB,EAAoC,UAApC,CAAd;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGe,KAAK,KAAK,UAAb,EAAyB;AACvB,YAAMO,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAArB;AACAT,MAAAA,QAAQ,CAACK,KAAK,CAACC,YAAD,CAAN,CAAR;AACD;AACF,GALQ,EAKP,CAACP,KAAD,CALO,CAAT;AAOA,QAAMW,SAAS,GAAGjB,cAAlB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,oBAAd;AAAA,oBAAoCU,KAAK,CAACQ,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCT,KAAK,CAACU,KAAN,CAAY,CAAZ;AAApE;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAI,UAAA,SAAS,EAAC,wBAAd;AAAA,qBAAwCZ,KAAK,CAACU,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCX,KAAK,CAACY,KAAN,CAAY,CAAZ,CAAxE,cAA2FH,SAAS,CAACI,IAAV,CAAeC,OAAf,CAAuB,QAAvB,EAAgC,EAAhC,EAAoCA,OAApC,CAA4C,IAA5C,EAAkD,GAAlD,EAAuDb,KAAvD,CAA6D,GAA7D,EAAkEc,OAAlE,GAA4EC,IAA5E,CAAiF,GAAjF,CAA3F;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,YAAD;AAAc,QAAA,KAAK,EAAElB,KAArB;AAA4B,QAAA,QAAQ,EAAEC,QAAtC;AAAgD,QAAA,IAAI,EAAEN;AAAtD;AAAA;AAAA;AAAA;AAAA,cALF,EAMIK,KAAK,KAAK,UAAV,iBACA;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBAEIK,OAAO,CAACc,GAAR,CAAaC,KAAD,iBACV;AAAK,UAAA,SAAS,EAAC,wBAAf;AAAA,kCACA;AAAI,YAAA,SAAS,EAAC,+BAAd;AAAA,sBAA+CT,SAAS,CAAE,QAAOS,KAAM,EAAf;AAAxD;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAK,YAAA,SAAS,EAAC,iCAAf;AAAA,uBACIpB,KAAK,KAAK,MAAV,iBAAsB,QAAC,SAAD;AAAW,cAAA,IAAI,EAAEW,SAAS,CAAE,OAAMS,KAAM,EAAd,CAA1B;AAA4C,cAAA,KAAK,EAAET,SAAS,CAAE,QAAOS,KAAM,EAAf,CAAT,CAA2BC;AAA9E;AAAA;AAAA;AAAA;AAAA,oBAD1B,EAEIrB,KAAK,KAAK,OAAV,iBAAuB,QAAC,UAAD;AAAY,cAAA,KAAK,EAAEW,SAAS,CAAE,QAAOS,KAAM,EAAf,CAAT,CAA2BC;AAA9C;AAAA;AAAA;AAAA;AAAA,oBAF3B,EAGIrB,KAAK,KAAK,QAAV,iBAAwB,QAAC,WAAD;AAAa,cAAA,KAAK,EAAEW,SAAS,CAAE,QAAOS,KAAM,EAAf,CAAT,CAA2BC;AAA/C;AAAA;AAAA;AAAA;AAAA,oBAH5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAFJ;AAAA;AAAA;AAAA;AAAA,cAPJ,EAuBIrB,KAAK,KAAK,UAAV,iBAA0B,QAAC,aAAD;AAAe,QAAA,MAAM,EAAEW,SAAS,CAACW;AAAjC;AAAA;AAAA;AAAA;AAAA,cAvB9B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eA0BE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEtB,KAArB;AAA4B,MAAA,QAAQ,EAAEC,QAAtC;AAAgD,MAAA,IAAI,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;AAED,OAAO,eAAesB,kBAAf,CAAkC;AAACC,EAAAA,OAAO,GAAC,IAAT;AAAeC,EAAAA;AAAf,CAAlC,EAA0D;AAC/D,QAAM5B,QAAQ,GAAG4B,MAAM,CAAChC,KAAxB;AACA,QAAMS,KAAK,GAAGL,QAAQ,CAACM,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAd;AACA,QAAMC,KAAK,GAAGP,QAAQ,CAACM,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAd;AACA,QAAMT,cAAc,GAAG,CAAC,MAAMP,SAAS,CAAE,GAAEe,KAAM,IAAGE,KAAM,EAAnB,CAAhB,KAA0C,EAAjE;AACA,SAAO;AACHsB,IAAAA,KAAK,EAAE;AAAEhC,MAAAA;AAAF;AADJ,GAAP;AAGD","sourcesContent":["import { useRouter } from 'next/router'\nimport { useEffect, useState } from 'react'\nimport { getEvents } from '../../lib/api'\n\n// FETCH\n// import staticContent from '../../data'\nimport EventToolBar from '../../components/Event/EventToolBar'\nimport StoryRead from '../../components/Event/StoryRead'\nimport StoryWatch from '../../components/Event/StoryWatch'\nimport StoryListen from '../../components/Event/StoryListen'\nimport EventFeedback from '../../components/Event/EventFeedback'\n\nexport default function event({ fetchedContent, lang }) {\n\n  const router = useRouter()\n  const [location, setLocation] = useState(router.query.event)\n  const [media, setMedia] = useState('read');\n  const place = location.split('-')[0]\n  const theme = location.split('-')[1]\n  const stories = [1,2,3];\n\n  const modes = ['read','watch','listen','feedback','surprise']\n\n  useEffect(() => {\n    if(media === \"surprise\") {\n      const randomNumber = Math.round(Math.random()*3);\n      setMedia(modes[randomNumber]);\n    }              \n  },[media])\n\n  const eventInfo = fetchedContent;\n\n  return (\n    <div className=\"event\">\n      <div className=\"event-wrapper\">\n        <div className=\"event__info\">\n          <h2 className=\"event__info__theme\">{theme.charAt(0).toUpperCase() + theme.slice(1)}</h2>\n          <h2 className=\"event__info__dateplace\">{place.charAt(0).toUpperCase() + place.slice(1)} — {eventInfo.date.replace(' 00:00','').replace(/-/g, '.').split('.').reverse().join('.')}}</h2>\n        </div>\n        <EventToolBar media={media} setMedia={setMedia} lang={lang}/>\n        { media !== 'feedback' && (\n          <div className=\"event__stories\">\n            {\n              stories.map((index) => (\n                <div className=\"event__stories__single\">\n                <h3 className=\"event__stories__single__title\">{eventInfo[`Title${index}`]}</h3>\n                <div className=\"event__stories__single__content\">\n                  { media === 'read' && ( <StoryRead text={eventInfo[`Text${index}`]} photo={eventInfo[`Photo${index}`].filename}/> )}\n                  { media === 'watch' && ( <StoryWatch video={eventInfo[`Video${index}`].filename} /> )}\n                  { media === 'listen' && ( <StoryListen audio={eventInfo[`Audio${index}`].filename}/> )}\n                </div>\n              </div>\n              ))\n            }\n          </div>\n          )\n        }\n        { media === 'feedback' && ( <EventFeedback medias={eventInfo.Feedback_medias}/> )}\n      </div>\n      <EventToolBar media={media} setMedia={setMedia} lang='en'/>\n    </div>\n  )\n}\n\nexport async function getServerSideProps({preview=null, params}) {\n  const location = params.event;\n  const place = location.split('-')[0]\n  const theme = location.split('-')[1]\n  const fetchedContent = (await getEvents(`${place}/${theme}`)) || []\n  return {\n      props: { fetchedContent },\n  }\n}"]},"metadata":{},"sourceType":"module"}