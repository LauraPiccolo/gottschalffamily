{"ast":null,"code":"import _regeneratorRuntime from \"/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n} // Frontpage\n\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        preview,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables, preview = _ref.preview;\n            _context.next = 3;\n            return fetch('https://gapi.storyblok.com/v1/api', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Token: 'zpjVfToBDoqLTFrpreoYMwtt',\n                Version: preview ? 'draft' : 'published'\n              },\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 10;\n              break;\n            }\n\n            console.error(json.errors);\n            throw new Error('Failed to fetch API');\n\n          case 10:\n            console.log(json.data);\n            return _context.abrupt(\"return\", json.data);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getThemes() {\n  return _getThemes.apply(this, arguments);\n}\n\nfunction _getThemes() {\n  _getThemes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchAPI(\"\\n  {\\n    HomeItem(id: \\\"home\\\") {\\n        id\\n        content {\\n            Bewerbungsfotos\\n            Businessfotografie\\n            Industriereportage\\n            Preise\\n            Studio\\n            contact_address\\n            contact_info\\n            contact_text\\n            impressum\\n        }\\n    }\\n  }     \\n  \", {\n              preview: true\n            });\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.themes);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getThemes.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/lib/api.js"],"names":["fetchAPI","query","variables","preview","fetch","method","headers","Token","Version","body","JSON","stringify","res","json","errors","console","error","Error","log","data","getThemes","themes"],"mappings":";;;SAAeA,Q;;EAuBf;;;;uEAvBA,iBAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2EAAwD,EAAxD,EAAiCC,SAAjC,QAAiCA,SAAjC,EAA4CC,OAA5C,QAA4CA,OAA5C;AAAA;AAAA,mBACoBC,KAAK,CAAC,mCAAD,EAAsC;AACzDC,cAAAA,MAAM,EAAE,MADiD;AAEzDC,cAAAA,OAAO,EAAE;AACL,gCAAgB,kBADX;AAELC,gBAAAA,KAAK,EAAE,0BAFF;AAGLC,gBAAAA,OAAO,EAAEL,OAAO,GAAG,OAAH,GAAa;AAHxB,eAFgD;AAOzDM,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBV,gBAAAA,KAAK,EAALA,KADiB;AAEjBC,gBAAAA,SAAS,EAATA;AAFiB,eAAf;AAPmD,aAAtC,CADzB;;AAAA;AACQU,YAAAA,GADR;AAAA;AAAA,mBAcqBA,GAAG,CAACC,IAAJ,EAdrB;;AAAA;AAcQA,YAAAA,IAdR;;AAAA,iBAeMA,IAAI,CAACC,MAfX;AAAA;AAAA;AAAA;;AAgBMC,YAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AAhBN,kBAiBY,IAAIG,KAAJ,CAAU,qBAAV,CAjBZ;;AAAA;AAmBEF,YAAAA,OAAO,CAACG,GAAR,CAAYL,IAAI,CAACM,IAAjB;AAnBF,6CAoBSN,IAAI,CAACM,IApBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBA,gBAAsBC,SAAtB;AAAA;AAAA;;;wEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcpB,QAAQ,oVAkB3B;AACIG,cAAAA,OAAO,EAAE;AADb,aAlB2B,CADtB;;AAAA;AACCgB,YAAAA,IADD;AAAA,8CAuBEA,IAvBF,aAuBEA,IAvBF,uBAuBEA,IAAI,CAAEE,MAvBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["async function fetchAPI(query, { variables, preview } = {}) {\n  const res = await fetch('https://gapi.storyblok.com/v1/api', {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n          Token: 'zpjVfToBDoqLTFrpreoYMwtt',\n          Version: preview ? 'draft' : 'published',\n      },\n      body: JSON.stringify({\n          query,\n          variables,\n      }),\n  })\n\n  const json = await res.json()\n  if (json.errors) {\n      console.error(json.errors)\n      throw new Error('Failed to fetch API')\n  }\n  console.log(json.data)\n  return json.data\n}\n\n// Frontpage\nexport async function getThemes() {\n  const data = await fetchAPI(`\n  {\n    HomeItem(id: \"home\") {\n        id\n        content {\n            Bewerbungsfotos\n            Businessfotografie\n            Industriereportage\n            Preise\n            Studio\n            contact_address\n            contact_info\n            contact_text\n            impressum\n        }\n    }\n  }     \n  `,\n  {\n      preview: true\n  }\n  )\n  return data?.themes\n}\n\n"]},"metadata":{},"sourceType":"module"}