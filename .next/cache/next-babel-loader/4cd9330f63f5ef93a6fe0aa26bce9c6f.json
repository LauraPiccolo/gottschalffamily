{"ast":null,"code":"async function fetchAPI(query, {\n  variables,\n  preview,\n  folder\n} = {}) {\n  const res = await fetch('https://gapi.storyblok.com/v1/api', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Token: 'aYu5zqsg2dHE3YmFmsDgFAtt',\n      Version: preview ? 'draft' : 'published',\n      starts_with: folder ? folder : '/'\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n} // Frontpage\n\n\nexport async function getHome() {\n  const data = await fetchAPI(`\n  {\n    HomeItem(id: \"home\") {\n        id\n        name\n        content {\n            Title\n            Subtitle\n            Introduction_video {\n              filename\n            }\n            Storylink {\n              url\n            }\n            Wo_ar\n            Wo_de\n            Wo_en\n            Was_ar\n            Was_de\n            Was_en\n            Wer_ar\n            Wer_de\n            Wer_en\n            Wie_ar\n            Wie_de\n            Wie_en\n            Warum_ar\n            Warum_de\n            Warum_en\n            Impressum\n        }\n    }\n  }     \n  `, {\n    preview: true\n  });\n  return data === null || data === void 0 ? void 0 : data.HomeItem.content;\n} // Events\n\nexport async function getEvents(path) {\n  const data = await fetchAPI(`\n    {\n        ArchivedeventItem(id: \"archived-events/${path}\") {\n          id\n          content {\n            Text1\n            Text2\n            Text3\n            Title1\n            Title2\n            Title3\n            Video1 {\n                filename\n                alt\n            }\n            Video2 {\n                filename\n                alt\n            }\n            Video3 {\n                filename\n                alt\n            }\n            Photo1 {\n                filename\n            }\n            Photo2 {\n                filename\n            }\n            Photo3 {\n                filename\n            }\n            Audio1 {\n                filename\n                alt\n            }\n            Audio2 {\n                filename\n                alt\n            }\n            Audio3 {\n                filename\n                alt\n            }\n            date\n            Feedback_medias {\n                filename\n            }\n            thumbnail {\n                filename\n            }\n          }\n        }\n      } \n    `, {\n    preview: true\n  });\n  return data === null || data === void 0 ? void 0 : data.ArchivedeventItem.content;\n}\nexport async function getThemes(path) {\n  const data = await fetchAPI(`\n    {\n        ThemeItems {\n          items {\n            content {\n                Period\n                Title\n                Description\n                Timing\n                events {\n                  future_event {\n                    date\n                    location\n                    thumbnail {\n                      url\n                    }\n                    stream_link {\n                      url\n                    }\n                    registration_email {\n                      email\n                    }\n                    description\n                  }\n                }\n            }\n          }\n        }\n      } \n    `, {\n    preview: true\n  });\n  return data === null || data === void 0 ? void 0 : data.ThemeItems.items;\n}\nexport async function getEventList(path) {\n  const data = await fetchAPI(`\n    {\n        ArchivedeventItems {\n          items {\n            content {\n              theme {\n                name\n              }\n              date\n              thumbnail {\n                filename\n              }\n            }\n            full_slug\n          }\n        }\n      }\n      \n    `, {\n    preview: true\n  });\n  return data === null || data === void 0 ? void 0 : data.ArchivedeventItems.items;\n}","map":{"version":3,"sources":["/Users/laura/Documents/WORK/2021/Storyfeld/Storyfeld Phase 2/lib/api.js"],"names":["fetchAPI","query","variables","preview","folder","res","fetch","method","headers","Token","Version","starts_with","body","JSON","stringify","json","errors","console","error","Error","data","getHome","HomeItem","content","getEvents","path","ArchivedeventItem","getThemes","ThemeItems","items","getEventList","ArchivedeventItems"],"mappings":"AAAA,eAAeA,QAAf,CAAwBC,KAAxB,EAA+B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,IAAiC,EAAhE,EAAoE;AAClE,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAsC;AACzDC,IAAAA,MAAM,EAAE,MADiD;AAEzDC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAELC,MAAAA,KAAK,EAAE,0BAFF;AAGLC,MAAAA,OAAO,EAAEP,OAAO,GAAG,OAAH,GAAa,WAHxB;AAILQ,MAAAA,WAAW,EAAEP,MAAM,GAAGA,MAAH,GAAY;AAJ1B,KAFgD;AAQzDQ,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBb,MAAAA,KADiB;AAEjBC,MAAAA;AAFiB,KAAf;AARmD,GAAtC,CAAvB;AAcA,QAAMa,IAAI,GAAG,MAAMV,GAAG,CAACU,IAAJ,EAAnB;;AACA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AACbC,IAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AACA,UAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACD,SAAOJ,IAAI,CAACK,IAAZ;AACD,C,CAED;;;AACA,OAAO,eAAeC,OAAf,GAAyB;AAC9B,QAAMD,IAAI,GAAG,MAAMpB,QAAQ,CAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAjC6B,EAkC3B;AACIG,IAAAA,OAAO,EAAE;AADb,GAlC2B,CAA3B;AAsCA,SAAOiB,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEE,QAAN,CAAeC,OAAtB;AACD,C,CAED;;AACA,OAAO,eAAeC,SAAf,CAAyBC,IAAzB,EAA+B;AAClC,QAAML,IAAI,GAAG,MAAMpB,QAAQ,CAAE;AACjC;AACA,iDAAiDyB,IAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAtD+B,EAuD3B;AACItB,IAAAA,OAAO,EAAE;AADb,GAvD2B,CAA3B;AA2DA,SAAOiB,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEM,iBAAN,CAAwBH,OAA/B;AACD;AAED,OAAO,eAAeI,SAAf,CAAyBF,IAAzB,EAA+B;AACpC,QAAML,IAAI,GAAG,MAAMpB,QAAQ,CAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA7B+B,EA8B3B;AACIG,IAAAA,OAAO,EAAE;AADb,GA9B2B,CAA3B;AAkCA,SAAOiB,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEQ,UAAN,CAAiBC,KAAxB;AACD;AAED,OAAO,eAAeC,YAAf,CAA4BL,IAA5B,EAAkC;AACvC,QAAML,IAAI,GAAG,MAAMpB,QAAQ,CAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlB+B,EAmB3B;AACIG,IAAAA,OAAO,EAAE;AADb,GAnB2B,CAA3B;AAuBA,SAAOiB,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEW,kBAAN,CAAyBF,KAAhC;AACD","sourcesContent":["async function fetchAPI(query, { variables, preview, folder } = {}) {\n  const res = await fetch('https://gapi.storyblok.com/v1/api', {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n          Token: 'aYu5zqsg2dHE3YmFmsDgFAtt',\n          Version: preview ? 'draft' : 'published',\n          starts_with: folder ? folder : '/',\n      },\n      body: JSON.stringify({\n          query,\n          variables,\n      }),\n  })\n\n  const json = await res.json()\n  if (json.errors) {\n      console.error(json.errors)\n      throw new Error('Failed to fetch API')\n  }\n  return json.data\n}\n\n// Frontpage\nexport async function getHome() {\n  const data = await fetchAPI(`\n  {\n    HomeItem(id: \"home\") {\n        id\n        name\n        content {\n            Title\n            Subtitle\n            Introduction_video {\n              filename\n            }\n            Storylink {\n              url\n            }\n            Wo_ar\n            Wo_de\n            Wo_en\n            Was_ar\n            Was_de\n            Was_en\n            Wer_ar\n            Wer_de\n            Wer_en\n            Wie_ar\n            Wie_de\n            Wie_en\n            Warum_ar\n            Warum_de\n            Warum_en\n            Impressum\n        }\n    }\n  }     \n  `,\n  {\n      preview: true\n  }\n  )\n  return data?.HomeItem.content\n}\n\n// Events\nexport async function getEvents(path) {\n    const data = await fetchAPI(`\n    {\n        ArchivedeventItem(id: \"archived-events/${path}\") {\n          id\n          content {\n            Text1\n            Text2\n            Text3\n            Title1\n            Title2\n            Title3\n            Video1 {\n                filename\n                alt\n            }\n            Video2 {\n                filename\n                alt\n            }\n            Video3 {\n                filename\n                alt\n            }\n            Photo1 {\n                filename\n            }\n            Photo2 {\n                filename\n            }\n            Photo3 {\n                filename\n            }\n            Audio1 {\n                filename\n                alt\n            }\n            Audio2 {\n                filename\n                alt\n            }\n            Audio3 {\n                filename\n                alt\n            }\n            date\n            Feedback_medias {\n                filename\n            }\n            thumbnail {\n                filename\n            }\n          }\n        }\n      } \n    `,\n    {\n        preview: true,\n    }\n    )\n    return data?.ArchivedeventItem.content\n  }\n\n  export async function getThemes(path) {\n    const data = await fetchAPI(`\n    {\n        ThemeItems {\n          items {\n            content {\n                Period\n                Title\n                Description\n                Timing\n                events {\n                  future_event {\n                    date\n                    location\n                    thumbnail {\n                      url\n                    }\n                    stream_link {\n                      url\n                    }\n                    registration_email {\n                      email\n                    }\n                    description\n                  }\n                }\n            }\n          }\n        }\n      } \n    `,\n    {\n        preview: true,\n    }\n    )\n    return data?.ThemeItems.items\n  }\n\n  export async function getEventList(path) {\n    const data = await fetchAPI(`\n    {\n        ArchivedeventItems {\n          items {\n            content {\n              theme {\n                name\n              }\n              date\n              thumbnail {\n                filename\n              }\n            }\n            full_slug\n          }\n        }\n      }\n      \n    `,\n    {\n        preview: true,\n    }\n    )\n    return data?.ArchivedeventItems.items\n  }\n  \n"]},"metadata":{},"sourceType":"module"}