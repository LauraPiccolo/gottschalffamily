{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/components/Event/EventToolBar/index.js\",\n    _this = this;\n\nvar EventToolBar = function EventToolBar(_ref) {\n  var media = _ref.media,\n      setMedia = _ref.setMedia;\n  var modes = ['read', 'watch', 'listen', 'feedback', 'surprise'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event__toolbar\",\n    children: modes.map(function (mode) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"event__toolbar__button\".concat(media === mode ? ' event__toolbar__button--selected' : ''),\n        onClick: function onClick() {\n          return setMedia(mode);\n        },\n        children: mode === 'suprise' ? 'Surprise me!' : mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 7\n  }, _this);\n};\n\n_c = EventToolBar;\nexport default EventToolBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventToolBar\");","map":{"version":3,"sources":["/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/components/Event/EventToolBar/index.js"],"names":["EventToolBar","media","setMedia","modes","map","mode"],"mappings":";;;;;AAAA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAAyB;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAE1C,MAAMC,KAAK,GAAG,CAAC,MAAD,EAAQ,OAAR,EAAgB,QAAhB,EAAyB,UAAzB,EAAoC,UAApC,CAAd;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,cAEQA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD;AAAA,0BACR;AAAQ,QAAA,SAAS,kCAA2BJ,KAAK,KAAKI,IAAV,GAAiB,mCAAjB,GAAqD,EAAhF,CAAjB;AAAuG,QAAA,OAAO,EAAE;AAAA,iBAAMH,QAAQ,CAACG,IAAD,CAAd;AAAA,SAAhH;AAAA,kBAAuIA,IAAI,KAAK,SAAT,GAAqB,cAArB,GAAsCA;AAA7K;AAAA;AAAA;AAAA;AAAA,eADQ;AAAA,KAAV;AAFR;AAAA;AAAA;AAAA;AAAA,WADF;AASD,CAbH;;KAAML,Y;AAeJ,eAAeA,YAAf","sourcesContent":["const EventToolBar = ({ media, setMedia }) => {\n\n    const modes = ['read','watch','listen','feedback','surprise']\n\n    return (\n      <div className=\"event__toolbar\">\n          {\n              modes.map((mode) => (\n                <button className={`event__toolbar__button${media === mode ? ' event__toolbar__button--selected':''}`} onClick={() => setMedia(mode)}>{mode === 'suprise' ? 'Surprise me!' : mode}</button>\n              ))\n          }\n      </div>\n    );\n  };\n  \n  export default EventToolBar;\n  "]},"metadata":{},"sourceType":"module"}