{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/components/Event/EventToolBar/index.js\",\n    _this = this;\n\nvar EventToolBar = function EventToolBar(_ref) {\n  var media = _ref.media,\n      setMedia = _ref.setMedia,\n      lang = _ref.lang;\n  lang = 'en';\n  var modes = {\n    en: ['read', 'watch', 'listen', 'feedback', 'surprise'],\n    ar: ['read', 'watch', 'listen', 'feedback', 'surprise'],\n    de: [\"Lesen\", \"Anschauen\", \"Zuhören\", \"Feedback\", \"Überraschung\"]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event__toolbar\",\n    children: modes.map(function (mode) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"event__toolbar__button\".concat(media === mode ? ' event__toolbar__button--selected' : ''),\n        onClick: function onClick() {\n          return setMedia(mode);\n        },\n        children: mode === 'surprise' ? 'Surprise me!' : mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, _this);\n};\n\n_c = EventToolBar;\nexport default EventToolBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventToolBar\");","map":{"version":3,"sources":["/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/components/Event/EventToolBar/index.js"],"names":["EventToolBar","media","setMedia","lang","modes","en","ar","de","map","mode"],"mappings":";;;;;AAAA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAA+B;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAEhDA,EAAAA,IAAI,GAAC,IAAL;AACA,MAAMC,KAAK,GAAG;AACZC,IAAAA,EAAE,EAAE,CAAC,MAAD,EAAQ,OAAR,EAAgB,QAAhB,EAAyB,UAAzB,EAAoC,UAApC,CADQ;AAEZC,IAAAA,EAAE,EAAE,CAAC,MAAD,EAAQ,OAAR,EAAgB,QAAhB,EAAyB,UAAzB,EAAoC,UAApC,CAFQ;AAGZC,IAAAA,EAAE,EAAE,CAAC,OAAD,EAAU,WAAV,EAAuB,SAAvB,EAAkC,UAAlC,EAA8C,cAA9C;AAHQ,GAAd;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,cAEQH,KAAK,CAACI,GAAN,CAAU,UAACC,IAAD;AAAA,0BACR;AAAQ,QAAA,SAAS,kCAA2BR,KAAK,KAAKQ,IAAV,GAAiB,mCAAjB,GAAqD,EAAhF,CAAjB;AAAuG,QAAA,OAAO,EAAE;AAAA,iBAAMP,QAAQ,CAACO,IAAD,CAAd;AAAA,SAAhH;AAAA,kBAAuIA,IAAI,KAAK,UAAT,GAAsB,cAAtB,GAAuCA;AAA9K;AAAA;AAAA;AAAA;AAAA,eADQ;AAAA,KAAV;AAFR;AAAA;AAAA;AAAA;AAAA,WADF;AASD,CAlBH;;KAAMT,Y;AAoBJ,eAAeA,YAAf","sourcesContent":["const EventToolBar = ({ media, setMedia, lang }) => {\n\n    lang='en';\n    const modes = {\n      en: ['read','watch','listen','feedback','surprise'],\n      ar: ['read','watch','listen','feedback','surprise'],\n      de: [\"Lesen\", \"Anschauen\", \"Zuhören\", \"Feedback\", \"Überraschung\"]\n    }\n\n    return (\n      <div className=\"event__toolbar\">\n          {\n              modes.map((mode) => (\n                <button className={`event__toolbar__button${media === mode ? ' event__toolbar__button--selected':''}`} onClick={() => setMedia(mode)}>{mode === 'surprise' ? 'Surprise me!' : mode}</button>\n              ))\n          }\n      </div>\n    );\n  };\n  \n  export default EventToolBar;\n  "]},"metadata":{},"sourceType":"module"}