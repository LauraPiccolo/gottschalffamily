{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/laura/Documents/WORK/2021/Storyfeld/Storyfeld Phase 2/pages/stories/[event].js\",\n    _s = $RefreshSig$();\n\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\n// FETCH\n// import staticContent from '../../data'\nimport EventToolBar from '../../components/Event/EventToolBar';\nimport StoryRead from '../../components/Event/StoryRead';\nimport StoryWatch from '../../components/Event/StoryWatch';\nimport StoryListen from '../../components/Event/StoryListen';\nimport EventFeedback from '../../components/Event/EventFeedback';\nexport var __N_SSP = true;\nexport default function event(_ref) {\n  _s();\n\n  var themes = _ref.themes,\n      lang = _ref.lang;\n  useEffect(function () {\n    document.querySelector('.menu').classList.remove('menu--open');\n  }, []);\n  var router = useRouter();\n\n  var _useState = useState(router.query.event),\n      location = _useState[0],\n      setLocation = _useState[1];\n\n  var _useState2 = useState('read'),\n      media = _useState2[0],\n      setMedia = _useState2[1];\n\n  var place = location.split('-')[0];\n  var theme = location.split('-')[1];\n  var stories = [1, 2, 3];\n  console.log(theme, place);\n  var modes = ['read', 'watch', 'listen', 'feedback', 'surprise'];\n  useEffect(function () {// if(media !=='feedback') document.querySelector('.event__stories').scrollTo(0,0);\n    // if(media === \"surprise\") {\n    //   const randomNumber = Math.round(Math.random()*3);\n    //   setMedia(modes[randomNumber]);\n    //   if(modes[randomNumber] !=='feedback') document.querySelector('.event__stories').scrollTo(0,0);\n    // }              \n  }, [media]);\n  var eventInfo = themes.filter(function (themee) {\n    return themee.content.Title === theme;\n  })[0].content.events.filter(function (event) {\n    return event.location === place;\n  });\n  console.log(eventInfo);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n} // export async function getServerSideProps({preview=null, params}) {\n//   const location = params.event;\n//   const place = location.split('-')[0]\n//   const theme = location.split('-')[1]\n//   const fetchedContent = (await getEvents(`${place}/${theme}`)) || []\n//   return {\n//       props: { fetchedContent },\n//   }\n// }\n\n_s(event, \"wJ9qg/O+kmJfhCQSgZZtPWHt/iQ=\", false, function () {\n  return [useRouter];\n});","map":{"version":3,"sources":["/Users/laura/Documents/WORK/2021/Storyfeld/Storyfeld Phase 2/pages/stories/[event].js"],"names":["useRouter","useEffect","useState","EventToolBar","StoryRead","StoryWatch","StoryListen","EventFeedback","event","themes","lang","document","querySelector","classList","remove","router","query","location","setLocation","media","setMedia","place","split","theme","stories","console","log","modes","eventInfo","filter","themee","content","Title","events"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA;AACA;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;;AAEA,eAAe,SAASC,KAAT,OAAiC;AAAA;;AAAA,MAAhBC,MAAgB,QAAhBA,MAAgB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAE9CT,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,CAA0CC,MAA1C,CAAiD,YAAjD;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAMC,MAAM,GAAGf,SAAS,EAAxB;;AAN8C,kBAOdE,QAAQ,CAACa,MAAM,CAACC,KAAP,CAAaR,KAAd,CAPM;AAAA,MAOvCS,QAPuC;AAAA,MAO7BC,WAP6B;;AAAA,mBAQpBhB,QAAQ,CAAC,MAAD,CARY;AAAA,MAQvCiB,KARuC;AAAA,MAQhCC,QARgC;;AAS9C,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAd;AACA,MAAMC,KAAK,GAAGN,QAAQ,CAACK,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAd;AACA,MAAME,OAAO,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAhB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBF,KAAnB;AAEA,MAAMM,KAAK,GAAG,CAAC,MAAD,EAAQ,OAAR,EAAgB,QAAhB,EAAyB,UAAzB,EAAoC,UAApC,CAAd;AAEA1B,EAAAA,SAAS,CAAC,YAAM,CACd;AACA;AACA;AACA;AACA;AACA;AACD,GAPQ,EAOP,CAACkB,KAAD,CAPO,CAAT;AASA,MAAMS,SAAS,GAAGnB,MAAM,CAACoB,MAAP,CAAc,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACC,OAAP,CAAeC,KAAf,KAAyBT,KAArC;AAAA,GAAd,EAA0D,CAA1D,EAA6DQ,OAA7D,CAAqEE,MAArE,CAA4EJ,MAA5E,CAAmF,UAACrB,KAAD;AAAA,WAAWA,KAAK,CAACS,QAAN,KAAmBI,KAA9B;AAAA,GAAnF,CAAlB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAtEwBpB,K;UAMPR,S","sourcesContent":["import { useRouter } from 'next/router'\nimport { useEffect, useState } from 'react'\nimport { getThemes} from '../../lib/api'\n\n// FETCH\n// import staticContent from '../../data'\nimport EventToolBar from '../../components/Event/EventToolBar'\nimport StoryRead from '../../components/Event/StoryRead'\nimport StoryWatch from '../../components/Event/StoryWatch'\nimport StoryListen from '../../components/Event/StoryListen'\nimport EventFeedback from '../../components/Event/EventFeedback'\n\nexport default function event({ themes, lang }) {\n\n  useEffect(() => {\n    document.querySelector('.menu').classList.remove('menu--open');\n  }, [])\n\n  const router = useRouter()\n  const [location, setLocation] = useState(router.query.event)\n  const [media, setMedia] = useState('read');\n  const place = location.split('-')[0]\n  const theme = location.split('-')[1]\n  const stories = [1,2,3];\n\n  console.log(theme, place);\n\n  const modes = ['read','watch','listen','feedback','surprise']\n\n  useEffect(() => {\n    // if(media !=='feedback') document.querySelector('.event__stories').scrollTo(0,0);\n    // if(media === \"surprise\") {\n    //   const randomNumber = Math.round(Math.random()*3);\n    //   setMedia(modes[randomNumber]);\n    //   if(modes[randomNumber] !=='feedback') document.querySelector('.event__stories').scrollTo(0,0);\n    // }              \n  },[media])\n\n  const eventInfo = themes.filter((themee) => themee.content.Title === theme)[0].content.events.filter((event) => event.location === place);\n\n  console.log(eventInfo)\n\n  return (\n    <div className=\"event\">\n      {/* <div className=\"event-wrapper\">\n        <div className=\"event__info\">\n          <h2 className=\"event__info__theme\">{theme.charAt(0).toUpperCase() + theme.slice(1)}</h2>\n          <h2 className=\"event__info__dateplace\">{place.charAt(0).toUpperCase() + place.slice(1)} â€” {eventInfo.date.replace(' 00:00','').replace(/-/g, '.').split('.').reverse().join('.')}</h2>\n        </div>\n        <EventToolBar media={media} setMedia={setMedia} lang={lang}/>\n        { media !== 'feedback' && (\n          <div className=\"event__stories\">\n            {\n              stories.map((index) => (\n                <div className=\"event__stories__single\" key={index}>\n                <h3 className=\"event__stories__single__title\">{eventInfo[`Title${index}`]}</h3>\n                <div className=\"event__stories__single__content\">\n                  { media === 'read' && ( <StoryRead text={eventInfo[`Text${index}`]} photo={eventInfo[`Photo${index}`].filename}/> )}\n                  { media === 'watch' && ( <StoryWatch video={eventInfo[`Video${index}`]} /> )}\n                  { media === 'listen' && ( <StoryListen audio={eventInfo[`Audio${index}`]}/> )}\n                </div>\n              </div>\n              ))\n            }\n          </div>\n          )\n        }\n        { media === 'feedback' && ( <EventFeedback medias={eventInfo.Feedback_medias}/> )}\n      </div>\n      <EventToolBar media={media} setMedia={setMedia} lang={lang}/> */}\n    </div>\n  )\n}\n\n// export async function getServerSideProps({preview=null, params}) {\n//   const location = params.event;\n//   const place = location.split('-')[0]\n//   const theme = location.split('-')[1]\n//   const fetchedContent = (await getEvents(`${place}/${theme}`)) || []\n//   return {\n//       props: { fetchedContent },\n//   }\n// }\n\nexport async function getServerSideProps({ preview = null }) {\n  const themes = (await getThemes(preview)) || []\n  return {\n      props: { themes },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}