{"ast":null,"code":"import _toConsumableArray from \"/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/pages/archive.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport ArchiveList from '../components/Archive/ArchiveList';\nimport ArchiveToolBar from '../components/Archive/ArchiveToolBar';\n\nvar Archive = function Archive(_ref) {\n  _s();\n\n  var themes = _ref.themes,\n      events = _ref.events;\n  var futureThemes = themes.filter(function (theme) {\n    return theme.content.Timing[0] === \"archived\";\n  });\n  var newThemes = futureThemes.map(function (theme) {\n    return {\n      title: [theme.content.Title],\n      events: _toConsumableArray(events.map(function (event) {\n        return {\n          city: event.full_slug.split('archived-events/').pop().split('/')[0],\n          date: event.content.date.replace(' 00:00', '').replace(/-/g, '.'),\n          link: \"\".concat(event.full_slug.split('archived-events/').pop().split('/')[0], \"-\").concat(theme.content.title)\n        };\n      }))\n    };\n  }); // Check all the event one by one\n  // If their name is not there yet, add them to array\n  // (Compare with existing array before)\n  // Create a key for each array, with each event (filter allevents)\n\n  var cityList = [];\n  events.forEach(function (element) {\n    var exists = false;\n    var thisCity = element.full_slug.split('archived-events/');\n    cityList.forEach(function (city) {\n      if (city === thisCity) exists = true;\n    });\n    if (!exists) cityList.push(thisCity);\n  });\n  console.log(cityList);\n  var archiveList = {\n    theme: _toConsumableArray(newThemes),\n    place: [// city: 'Berlin',\n      // events: [\n      //   {\n      //     theme: 'Happiness',\n      //     date: '10.12.2020',\n      //     link: '/archive/berlin/happiness'\n      //   },\n      // ]\n    ]\n  };\n\n  var _useState = useState('place'),\n      archiveMode = _useState[0],\n      setArchiveMode = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"archive\",\n    children: [/*#__PURE__*/_jsxDEV(ArchiveToolBar, {\n      archiveMode: archiveMode,\n      setArchiveMode: setArchiveMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ArchiveList, {\n      archiveMode: archiveMode,\n      archiveList: archiveList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Archive, \"jbu6AKLMwDUaDISowKvMdXEA86k=\");\n\n_c = Archive;\nexport var __N_SSP = true;\nexport default Archive;\n\nvar _c;\n\n$RefreshReg$(_c, \"Archive\");","map":{"version":3,"sources":["/Users/laura/Documents/WORK/2020/Storyfeld/Storyfeld Phase 2/pages/archive.js"],"names":["useState","ArchiveList","ArchiveToolBar","Archive","themes","events","futureThemes","filter","theme","content","Timing","newThemes","map","title","Title","event","city","full_slug","split","pop","date","replace","link","cityList","forEach","element","exists","thisCity","push","console","log","archiveList","place","archiveMode","setArchiveMode"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAGA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,cAAP,MAA2B,sCAA3B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAwB;AAAA;;AAAA,MAArBC,MAAqB,QAArBA,MAAqB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAEtC,MAAMC,YAAY,GAAGF,MAAM,CAACG,MAAP,CAAc,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACC,OAAN,CAAcC,MAAd,CAAqB,CAArB,MAA4B,UAAvC;AAAA,GAAd,CAArB;AAEA,MAAMC,SAAS,GAAGL,YAAY,CAACM,GAAb,CAAiB,UAACJ,KAAD;AAAA,WAAY;AAC7CK,MAAAA,KAAK,EAAE,CAACL,KAAK,CAACC,OAAN,CAAcK,KAAf,CADsC;AAE7CT,MAAAA,MAAM,qBAAMA,MAAM,CAACO,GAAP,CAAW,UAACG,KAAD;AAAA,eAAY;AACjCC,UAAAA,IAAI,EAAED,KAAK,CAACE,SAAN,CAAgBC,KAAhB,CAAsB,kBAAtB,EAA0CC,GAA1C,GAAgDD,KAAhD,CAAsD,GAAtD,EAA2D,CAA3D,CAD2B;AAEjCE,UAAAA,IAAI,EAAEL,KAAK,CAACN,OAAN,CAAcW,IAAd,CAAmBC,OAAnB,CAA2B,QAA3B,EAAoC,EAApC,EAAwCA,OAAxC,CAAgD,IAAhD,EAAqD,GAArD,CAF2B;AAGjCC,UAAAA,IAAI,YAAKP,KAAK,CAACE,SAAN,CAAgBC,KAAhB,CAAsB,kBAAtB,EAA0CC,GAA1C,GAAgDD,KAAhD,CAAsD,GAAtD,EAA2D,CAA3D,CAAL,cAAsEV,KAAK,CAACC,OAAN,CAAcI,KAApF;AAH6B,SAAZ;AAAA,OAAX,CAAN;AAFuC,KAAZ;AAAA,GAAjB,CAAlB,CAJsC,CAatC;AACA;AACA;AACA;;AAEA,MAAIU,QAAQ,GAAG,EAAf;AACAlB,EAAAA,MAAM,CAACmB,OAAP,CAAe,UAAAC,OAAO,EAAI;AACxB,QAAIC,MAAM,GAAG,KAAb;AACA,QAAMC,QAAQ,GAAGF,OAAO,CAACR,SAAR,CAAkBC,KAAlB,CAAwB,kBAAxB,CAAjB;AACAK,IAAAA,QAAQ,CAACC,OAAT,CAAiB,UAACR,IAAD,EAAU;AACzB,UAAIA,IAAI,KAAKW,QAAb,EAAuBD,MAAM,GAAG,IAAT;AACxB,KAFD;AAGA,QAAG,CAACA,MAAJ,EAAYH,QAAQ,CAACK,IAAT,CAAcD,QAAd;AACb,GAPD;AASAE,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AAEA,MAAMQ,WAAW,GAAG;AAClBvB,IAAAA,KAAK,qBACAG,SADA,CADa;AAIlBqB,IAAAA,KAAK,EAAE,CACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARK;AAJW,GAApB;;AA9BsC,kBA8CAhC,QAAQ,CAAC,OAAD,CA9CR;AAAA,MA8C/BiC,WA9C+B;AAAA,MA8ClBC,cA9CkB;;AAgDtC,sBACE;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,WAAW,EAAED,WAA7B;AAA0C,MAAA,cAAc,EAAEC;AAA1D;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,WAAD;AAAa,MAAA,WAAW,EAAED,WAA1B;AAAuC,MAAA,WAAW,EAAEF;AAApD;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAMD,CAtDD;;GAAM5B,O;;KAAAA,O;;AAgEN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react'\nimport { getThemes, getEventList } from '../lib/api'\n\nimport ArchiveList from '../components/Archive/ArchiveList'\nimport ArchiveToolBar from '../components/Archive/ArchiveToolBar'\n\nconst Archive = ({ themes, events }) => {\n\n  const futureThemes = themes.filter((theme) => theme.content.Timing[0] === \"archived\")\n\n  const newThemes = futureThemes.map((theme) => ({\n    title: [theme.content.Title],\n    events: [...events.map((event) => ({\n      city: event.full_slug.split('archived-events/').pop().split('/')[0],\n      date: event.content.date.replace(' 00:00','').replace(/-/g,'.'),\n      link: `${event.full_slug.split('archived-events/').pop().split('/')[0]}-${theme.content.title}`\n    }))],\n  }))\n\n  // Check all the event one by one\n  // If their name is not there yet, add them to array\n  // (Compare with existing array before)\n  // Create a key for each array, with each event (filter allevents)\n\n  let cityList = [];\n  events.forEach(element => {\n    let exists = false;\n    const thisCity = element.full_slug.split('archived-events/')\n    cityList.forEach((city) => {\n      if (city === thisCity) exists = true;\n    })\n    if(!exists) cityList.push(thisCity);\n  });\n\n  console.log(cityList)\n\n  const archiveList = {\n    theme: [\n      ...newThemes\n    ],\n    place: [\n      // city: 'Berlin',\n      // events: [\n      //   {\n      //     theme: 'Happiness',\n      //     date: '10.12.2020',\n      //     link: '/archive/berlin/happiness'\n      //   },\n      // ]\n    ]\n  }\n\n  const [archiveMode, setArchiveMode] = useState('place');\n  \n  return (\n    <div id=\"archive\">\n      <ArchiveToolBar archiveMode={archiveMode} setArchiveMode={setArchiveMode}/>\n      <ArchiveList archiveMode={archiveMode} archiveList={archiveList}/>\n    </div>\n  )\n}\n\nexport async function getServerSideProps({ preview = null }) {\n  const themes = (await getThemes(preview)) || []\n  const events = (await getEventList(preview)) || []\n  return {\n      props: { themes, events },\n  }\n}\n\nexport default Archive\n"]},"metadata":{},"sourceType":"module"}